<?php
namespace Moto\Database; use Moto; use Illuminate; use Zend; class Provider { const DEFAULT_CHARSET = 'utf8mb4'; const DEFAULT_COLLATE_POSTFIX = '_unicode_ci'; const SYSTEM_TABLES = [ 'content_blocks', 'content_taxonomies', 'content_taxonomy_relations', 'fonts', 'languages', 'media_folders', 'media_items', 'menus', 'menu_items', 'pages', 'pages_treepath', 'presets', 'roles', 'settings', 'styles', 'users', ]; protected static $_initialized = false; protected static $_schemaBuilder; protected static $_databaseCapsule; public static function getDatabaseCapsule() { if (!static::$_databaseCapsule) { static::$_databaseCapsule = new Illuminate\Database\Capsule\Manager(); static::$_databaseCapsule->setAsGlobal(); } return static::$_databaseCapsule; } public static function initEloquent(Zend\Db\Adapter\Adapter $ZendAdapter, $databaseConfig = null, $eventDispatcher = null) { if (static::$_initialized) { return false; } if (!is_array($databaseConfig)) { $databaseConfig = Moto\Config::get('database'); } if (!is_array($databaseConfig)) { throw new Moto\Exception('Bad database config, must be array'); } if (empty($databaseConfig['hostname'])) { throw new Moto\Exception('Config parameters "hostname" is empty'); } if (empty($databaseConfig['database'])) { throw new Moto\Exception('Config parameters "database" is empty'); } $charset = Moto\Util::getValue($databaseConfig, 'charset', 'utf8'); $config = [ 'driver' => 'mysql', 'host' => $databaseConfig['hostname'], 'database' => $databaseConfig['database'], 'username' => Moto\Util::getValue($databaseConfig, 'username', ''), 'password' => Moto\Util::getValue($databaseConfig, 'password', ''), 'charset' => $charset, 'prefix' => Moto\Util::getValue($databaseConfig, 'prefix', ''), 'collation' => $charset . '_unicode_ci', ]; $PDOConnection = $ZendAdapter->getDriver()->getConnection()->getResource(); $capsule = static::getDatabaseCapsule(); $databaseManager = $capsule->getDatabaseManager(); $databaseManager->extend('default', function ($config, $name) use ($PDOConnection) { return new Illuminate\Database\MySqlConnection($PDOConnection, $config['database'], $config['prefix'], $config); }); $capsule->addConnection($config); $capsule->addConnection($config, 'export'); if (!($eventDispatcher instanceof Illuminate\Events\Dispatcher)) { $eventDispatcher = Moto\System::getEventDispatcher(); } $capsule->setEventDispatcher($eventDispatcher); $capsule->bootEloquent(); static::$_initialized = true; return true; } public static function getConnection($name = 'default') { return static::getDatabaseCapsule()->getConnection($name); } public static function getSchemaBuilder() { if (!static::$_initialized) { throw new Moto\Exception('Eloquent not initialized'); } if (!static::$_schemaBuilder) { static::$_schemaBuilder = Illuminate\Database\Capsule\Manager::schema(); } return static::$_schemaBuilder; } public static function getTablePrefix() { return Moto\Config::get('database.prefix'); } public static function getSystemTables() { return static::SYSTEM_TABLES; } } class ContentTaxonomy extends Moto\Database\BaseModel { protected $table = 'content_taxonomies'; protected $morphClass = '@ContentTaxonomy'; protected $fillable = [ 'name', 'slug', 'type', 'attraction_level', 'parent_id', 'group_id', 'short_description', 'long_description', 'properties', ]; protected $casts = [ 'id' => 'int', 'name' => 'string', 'slug' => 'string', 'type' => 'string', 'assigned_targets_count' => 'int', 'assigned_count' => 'int', 'published_pages_count' => 'int', 'attraction_level' => 'int', 'parent_id' => 'int', 'group_id' => 'int', 'short_description' => 'string', 'long_description' => 'string', 'properties' => 'object', ]; protected $attributes = [ 'name' => '', 'slug' => '', 'type' => '', 'assigned_count' => 0, 'attraction_level' => 0, 'parent_id' => 0, 'group_id' => 0, 'short_description' => '', 'long_description' => '', 'properties' => '{}', ]; protected $visible = [ ]; protected $hidden = [ 'pivot', ]; protected $dates = [ ]; public function assignedTargets() { return $this->pages(); } public function pages() { return $this->belongsToMany(Moto\Database\Page::class, 'content_taxonomy_relations', 'taxonomy_id', 'target_id'); } public function publishedPages() { return Moto\Database\Page::addPublishedPageCondition($this->pages()); } public function getAbsoluteUrl($query = null) { $url = Moto\Website\BlogApplication::getAbsoluteUrl($this); if (!empty($query)) { $url = Moto\Util::extendUrl($url, array('query' => $query), array('query' => 'join')); } return $url; } public function getRelativeUrl($query = null) { $url = Moto\Website\BlogApplication::getRelativeUrl($this); if (!empty($query)) { $url = Moto\Util::extendUrl($url, array('query' => $query), array('query' => 'join')); } return $url; } } class ContentTaxonomyBlogTag extends Moto\Database\ContentTaxonomy { protected $morphClass = '@ContentTaxonomyBlogTag'; protected $fillable = [ 'name', 'slug', 'short_description', 'long_description', 'properties', ]; protected $attributes = [ 'name' => '', 'slug' => '', 'type' => 'blog.tag', 'assigned_count' => 0, 'short_description' => '', 'long_description' => '', 'properties' => '{}', ]; public static function boot() { parent::boot(); static::addGlobalScope(new Scope\SimpleGlobalScope(function ($builder, $model) { $builder->where('type', '=', 'blog.tag'); })); static::deleted(function ($model) { $model->pages()->detach(); }); } public function assignedTargets() { return $this->blogPosts(); } public function pages() { return $this->belongsToMany('Moto\Database\Page', 'content_taxonomy_relations', 'taxonomy_id', 'target_id'); } public function blogPosts() { return $this->pages()->where('pages.type', '=', 'blog.post'); } public function getParentPage() { return Moto\System::app(Moto\Website\BlogApplication::class)->getMainPage(); } } class ContentTaxonomyBlogCategory extends Moto\Database\ContentTaxonomy { protected $morphClass = '@ContentTaxonomyBlogCategory'; protected $fillable = [ 'name', 'slug', 'short_description', 'long_description', 'properties', ]; protected $attributes = [ 'name' => '', 'slug' => '', 'type' => 'blog.category', 'assigned_count' => 0, 'short_description' => '', 'long_description' => '', 'properties' => '{}', ]; public static function boot() { parent::boot(); static::addGlobalScope(new Scope\SimpleGlobalScope(function ($builder, $model) { $builder->where('type', '=', 'blog.category'); })); static::deleted(function ($model) { $model->pages()->update(['category_id' => null]); }); } public function assignedTargets() { return $this->blogPosts(); } public function getParentPage() { return Moto\System::app(Moto\Website\BlogApplication::class)->getMainPage(); } public function pages() { return $this->hasMany(Moto\Database\Page::class, 'category_id', 'id'); } public function blogPosts() { return $this->pages()->where('pages.type', '=', 'blog.post'); } public function publishedBlogPosts() { return Moto\Database\Page::addPublishedPageCondition($this->blogPosts()); } public function getPublishedBlogPostsCountAttribute($count) { if ($count === null) { try { $query = $this->hasOne(Moto\Database\Page::class, 'category_id', 'id') ->selectRaw('category_id, count(*) as value') ->groupBy('category_id'); $query = Moto\Database\Page::addPublishedPageCondition($query); $count = Moto\Util::getValue($query->first(), 'value', 0); $this->attributes['published_blog_posts_count'] = $count; } catch (\Exception $e) { if (Moto\System::isDevelopmentStage()) { Moto\System\Log::error('Error while retrieve count of published blog posts', [ 'record' => [ 'id' => $this->id, ], 'exception' => [ 'code' => $e->getCode(), 'message' => $e->getMessage(), ] ]); } } } return (int) $count; } } class Page extends Moto\Database\BaseModel { const CREATED_AT = 'created'; const UPDATED_AT = 'modified'; protected $table = 'pages'; protected $morphClass = '@Page'; protected $fillable = [ ]; protected $casts = [ 'id' => 'int', 'author_id' => 'int', 'parent_id' => 'int', 'category_id' => 'int', 'is_system' => 'int', 'properties' => 'object', 'layout' => 'object', ]; protected $attributes = [ ]; protected $visible = [ 'id', 'name', 'url', 'title', 'author_id', 'parent_id', 'category_id', 'is_system', 'content', 'type', 'status', 'visibility', 'properties', 'layout', 'styles', 'background', 'background_id', 'short_description', 'published', 'modified', 'created', 'tags', 'category', ]; protected $hidden = [ 'pivot', ]; protected $dates = [ 'published', ]; public static function boot() { parent::boot(); static::deleted(function ($model) { $model->tags()->detach(); }); } public function tags() { return $this->belongsToMany('Moto\Database\ContentTaxonomyBlogTag', 'content_taxonomy_relations', 'target_id', 'taxonomy_id'); } public function category() { return $this->belongsTo('Moto\Database\ContentTaxonomyBlogCategory', 'category_id', 'id'); } public function parentPage() { return $this->hasOne(static::class, 'id', 'parent_id'); } public function getParentPage($columns = ['*']) { if (!$this->parent_id) { return null; } return $this->parentPage()->first($columns); } public static function addPublishedPageCondition($query) { if ($query instanceof Illuminate\Database\Eloquent\Builder || $query instanceof Illuminate\Database\Eloquent\Relations\Relation) { $query->where('published', '<=', date('Y-m-d H:i:00', time())); $query->where('status', '=', Moto\Application\Pages\PageModel::STATUS_PUBLISH); } return $query; } } 