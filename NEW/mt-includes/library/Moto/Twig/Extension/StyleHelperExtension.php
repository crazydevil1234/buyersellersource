<?php
namespace Moto\Twig\Extension; use Moto; use Closure; class StyleHelperExtension extends AbstractExtension { protected $_name = 'motoStyleHelper'; protected $_options = array( 'colorAsVariable' => false, ); protected $_systemColors; protected $_constants = array( 'const_media_desktop_max_width' => '100%', 'const_media_tablet_max_width' => '1039px', 'const_media_mobile-h_max_width' => '767px', 'const_media_mobile-v_max_width' => '479px', ); protected $_cssRuleGenerators = []; protected $_transformers = []; public function __construct() { $this->addCssRuleGenerator('box-shadow', [$this, 'generateBoxShadowValue']); Moto\Hook::trigger(Moto\Hook::STYLE_HELPER__CREATED, $this); } public function addTransformer($handler) { if (!is_callable($handler)) { return false; } $this->_transformers[] = $handler; return true; } public function hasCssRuleGenerator($name) { return array_key_exists($name, $this->_cssRuleGenerators); } protected function getCssRuleGenerator($name) { if (!$this->hasCssRuleGenerator($name)) { return null; } $handler = $this->_cssRuleGenerators[$name]['handler']; if (is_string($handler)) { return $this->getCssRuleGenerator($handler); } return $handler; } public function addCssRuleGenerator($name, $handler, $rewritable = true) { if ($this->hasCssRuleGenerator($name) && !$this->_cssRuleGenerators[$name]['rewritable']) { return false; } if (!is_callable($handler) && !$this->hasCssRuleGenerator($handler)) { return false; } $this->_cssRuleGenerators[$name] = [ 'handler' => $handler, 'rewritable' => (boolean) $rewritable, ]; return true; } public function generateBoxShadowValue($value) { if (is_string($value)) { return $value; } if (!is_array($value)) { return null; } if (!Moto\Util::getValue($value, 'enabled', true)) { return null; } $result = []; $result[] = Moto\Util::getValue($value, 'offsetX'); $result[] = Moto\Util::getValue($value, 'offsetY'); $result[] = Moto\Util::getValue($value, 'blur'); $result[] = Moto\Util::getValue($value, 'spread'); $color = Moto\Util::getValue($value, 'color'); if (!empty($color)) { if ($this->getOption('colorAsVariable')) { $result[] = $color; } elseif ($this->isPreRenderMode()) { $result[] = '{{ StyleHelper.getSystemColor(\'' . $color . '\') }}'; } else { $result[] = $this->getSystemColor($color); } } if (Moto\Util::getValue($value, 'inset')) { $result[] = 'inset'; } if (count($result) < 1) { return null; } return new Moto\System\BagValue('box-shadow: ' . implode(' ', $result) . ';'); } protected function generateCssRuleValue($name, $value) { $handler = $this->getCssRuleGenerator($name); if (!$handler) { return $value; } try { $parameters = [$value, $name, $this]; if ($handler instanceof Closure) { $value = call_user_func_array($handler->bindTo($this, static::class), $parameters); } else { $value = call_user_func_array($handler, $parameters); } } catch (\Exception $e) { if (Moto\System::isDevelopmentStage()) { throw $e; } } return $value; } public function initRuntime(\Twig_Environment $environment) { parent::initRuntime($environment); $this->_systemColors = Moto\Application\Styles\Service::getColorTheme(); } public function getGlobals() { return array( 'StyleHelper' => $this ); } public function getFunctions() { return array( new \Twig_SimpleFunction('generateLessFromArray', array($this, 'generateLessFromArraySafe'), array( 'is_safe' => array( 'html', ), ) ), new \Twig_SimpleFunction('generateWidgetInlineStyles', array($this, 'generateWidgetInlineStyles'), array( 'is_safe' => array( 'html', ), ) ), new \Twig_SimpleFunction('generatePresetSelector', array($this, 'generatePresetSelectorSafe'), array( 'is_safe' => array( 'html', ), ) ), new \Twig_SimpleFunction('getSystemColor', array($this, 'getSystemColor'), array( 'is_safe' => array( 'html', ), ) ), ); } public function generateLessFromArray($property, $class = null) { return new \Twig_Markup($this->generateLessFromArraySafe($property, $class), 'UTF-8'); } public function generatePresetSelector($widgetClassName, $presetClassName = null) { return new \Twig_Markup($this->generatePresetSelectorSafe($widgetClassName, $presetClassName), 'UTF-8'); } public function getSystemColor($name, $value = null) { if (preg_match('/(base|custom)Color([0-9]+)_?([0-9]*)/', $name, $match)) { $value = Moto\Util::getValue($this->_systemColors, $match[1] . '.' . $match[2] . ($match[3] ? '.' . $match[3] : ''), $value); } return $value; } public function transformCssRuleValue($name, $value) { if ($name === 'background-image') { if ($this->isPreRenderMode()) { $value = 'url({{ Linker.img(\'' . $value . '\') }})'; } elseif ($value !== 'none') { $value = 'url(\'' . Moto\System::getUploadUrl($value) . '\')'; } } if (is_string($value) && $value[0] === '@' && strpos($name, 'color') !== false) { if ($this->getOption('colorAsVariable')) { return $value; } if ($this->isPreRenderMode()) { return '{{ StyleHelper.getSystemColor(\'' . $value . '\') }}'; } return $this->getSystemColor($value); } return $value; } public function transformStyleData($input, $className = null) { $input = (array) $input; if (array_key_exists('base', $input) || array_key_exists('before', $input) || array_key_exists('after', $input) || array_key_exists('hover', $input)) { return $input; } $transformers = $this->_transformers; foreach ($transformers as $handler) { try { $parameters = [$input, $className, $this]; if ($handler instanceof Closure) { $value = call_user_func_array($handler->bindTo($this, static::class), $parameters); } else { $value = call_user_func_array($handler, $parameters); } if (gettype($value) === gettype($input)) { $input = $value; } } catch (\Exception $e) { if (Moto\System::isDevelopmentStage()) { throw $e; } } } return $input; } public function generateLessFromArraySafe($property, $className = null) { $result = ''; if (empty($property)) { return $result; } if (is_string($property)) { if (is_string($className)) { $result .= $className . " {\n"; } $result .= $property; if (is_string($className)) { $result .= "\n}\n"; } return $result; } $property = $this->transformStyleData($property, $className); $inherits = []; foreach ($property as $name => $value) { if (empty($value) || empty($name)) { continue; } if ($name === 'base') { $result .= $this->generateLessFromArraySafe($value); continue; } if ($name === 'before' || $name === 'after' || $name === 'hover') { $code = $this->generateLessFromArraySafe($value); if (!empty($code)) { $result .= '&:' . $name . " {\n"; $result .= $code; $result .= "}\n"; } continue; } if ($value instanceof Moto\System\BagValue) { $result .= (string) $value . "\n"; continue; } if ($name[0] === '^') { $className = (string) $className; if (empty($className)) { if (Moto\System::isDevelopmentStage()) { Moto\System\Log::error('[' . __CLASS__ . '::' . __FUNCTION__ . '] Empty ClassName for property name "' . $name . '"'); throw new \Exception('Class name is empty for "' . $name . '"'); } continue; } $name = substr($name, 1); $name = str_replace('&', (string) $className, $name); $inherits[$name] = $value; continue; } if ($name === 'moto-placeholder-color' && !empty($value)) { $result .= "&::-webkit-input-placeholder { color: $value }\n"; $result .= "&::-ms-input-placeholder { color: $value }\n"; $result .= "&::-moz-placeholder { color: $value }\n"; continue; } if ($this->hasCssRuleGenerator($name)) { $value = $this->generateCssRuleValue($name, $value); } if ($value instanceof Moto\System\BagValue) { $result .= (string) $value . "\n"; continue; } if (empty($value)) { continue; } if (is_array($value)) { if (array_key_exists('unicode', $value) && is_string($value['unicode'])) { $value['unicode'] = ltrim($value['unicode'], '\\'); $result .= $name . ':"\\' . $value['unicode'] . '";' . "\n"; } continue; } $value = $this->transformCssRuleValue($name, $value); if (is_object($value)) { continue; } if ($value) { $result .= $name . ':' . $value . ';' . "\n"; } } if (is_string($className) && !empty($result)) { $result = $className . " {\n" . $result . "}\n"; } if (count($inherits) > 0) { foreach ($inherits as $selector => $value) { $result .= $this->generateLessFromArraySafe($value, $selector); } } return $result; } public function generateWidgetInlineStyles($styles) { if (is_string($styles)) { return $styles; } $styles = (array) $styles; $result = ''; foreach ($styles as $name => $value) { if (is_string($value) && empty($value)) { continue; } if ($name === 'background-image') { if ($this->isPreRenderMode()) { $value = 'url({{ Linker.img(\'' . $value . '\') }})'; } else { $value = 'url(' . Moto\System::getUploadUrl($value) . ')'; } } if (!is_string($value) || empty($value)) { continue; } if ($name === 'background-color' && $value[0] === '@') { continue; } if ($name === 'color' && $value[0] === '@') { continue; } $result .= $name . ':' . $value . ';'; } return $this->_returnTemplate($result); } public function generatePresetSelectorSafe($widgetClassName, $presetClassName = null) { $result = ''; if (!is_string($widgetClassName)) { Moto\System\Log::error('StyleHelper.generatePresetSelector: argument "$widgetClassName" should be a string:', array( '$widgetClassName' => $widgetClassName, '$presetClassName' => $presetClassName, ) ); return $result; } $result = $widgetClassName; if (!is_string($presetClassName)) { $presetClassName = Moto\Util::getValue($presetClassName, 'class_name', ''); } if (is_string($presetClassName) && !empty($presetClassName)) { $result .= '.' . $presetClassName; } return $result; } public function getConstant($name, $default = '') { return Moto\Util::getValue($this->_constants, $name, $default); } public function addConstant($name, $value) { if (!is_string($name) || !is_string($value)) { return false; } $name = trim($name); if ($name === '') { return false; } if (array_key_exists($name, $this->_constants)) { return false; } $this->_constants[$name] = $value; return true; } } 